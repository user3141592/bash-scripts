#!/usr/bin/env python
# -*- coding: utf8 -*-
# -*- coding: cp850 -*

# DESCRIPTION: Provide detailed information about the current circuit nodes: ip, nickname, reverse DNS, geolocalization, fingerprint and whois output
# USAGE: tor-ciruit
# EXAMPLE:
#
# # tor-circuit
#--------- Node 1 ------------

#IP                     88.99.27.131
#NICKNAME               Ommedzi
#REVERSE DNS            static.131.27.99.88.clients.your-server.de
#GEOLOCALIZATION        Germany (51.2993, 9.491)
#FINGERPRINT            F706699EE1C5317C9B2CC85A3830B5E409A3692D
#WHOIS OUTPUT
#                       88.99.27.128-88.99.27.191
#                       Hetzner Online GmbH
#                       Datacenter fsn1-dc1
#                       Hetzner Online GmbH
#                       Industriestrasse 25
#                       D-91710 Gunzenhausen
#                       Germany
#
#--------- Node 2 ------------
#
#IP                     144.76.14.145
#NICKNAME               PedicaboMundi
#REVERSE DNS            hactar.xyz
#GEOLOCALIZATION        Germany (51.2993, 9.491)
#FINGERPRINT            14419131033443AE6E21DA82B0D307F7CAE42BDB
#WHOIS OUTPUT
#                       144.76.14.128-144.76.14.159
#                       Hetzner Online GmbH
#                       Datacenter fsn1-dc10
#                       Hetzner Online GmbH
#                       Industriestrasse 25
#                       D-91710 Gunzenhausen
#                       Germany
#
#--------- Node 3 ------------
#
#IP                     133.18.172.64
#NICKNAME               Unnamed
#REVERSE DNS            v133-18-172-64.vir.kagoya.net
#GEOLOCALIZATION        Japan (35.69, 139.69)
#FINGERPRINT            D2BD00A5DE660368648BFC78D6724B8925FF0DA0
#WHOIS OUTPUT
#                       133.0.0.0-133.255.255.255
#                       Japan Network Information Center
#                       Urbannet-Kanda Bldg 4F
#                       3-6-2 Uchi-Kanda
#                       Chiyoda-ku, Tokyo 101-0047,Japan
#

from stem import CircStatus
from stem.control import Controller
import geoip2.database
import socket
import whois
from ipwhois import IPWhois

# Check if port 9051 is opened

import socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
result = sock.connect_ex(('127.0.0.1',9051))
if result != 0:
    print """
You need a control port for this script to work.
"""

    sys.exit()


reader = geoip2.database.Reader('/usr/lib/geoip/GeoLite2-City.mmdb')

with Controller.from_port(port = 9051) as controller:
    controller.authenticate()
    for circ in sorted(controller.get_circuits()):
        if circ.status != CircStatus.BUILT:
            continue

    node_num=1
    for i, entry in enumerate(circ.path):
        div = '+' if (i == len(circ.path) - 1) else '|'
        fingerprint, nickname = entry
        desc = controller.get_network_status(fingerprint, None)
        address = desc.address if desc else 'unknown'
        response=reader.city(address)
        try:
            socket.gethostbyaddr(address)
        except socket.herror:
            host='?'
        else:
            host=socket.gethostbyaddr(address)[0]

        #    org = whois.whois(host)['org']
        num_it=23
        column1 = ["IP","NICKNAME","REVERSE DNS","GEOLOCALIZATION","FINGERPRINT"]
        column2 = [address,nickname,host,str(response.country.name)+' ('+str(response.location.latitude)+', '+ str(response.location.longitude)+')',fingerprint]
        print '\n--------- Node '+str(node_num)+' ------------\n'
        for c1, c2 in zip(column1, column2):
            print "%-22s %s" % (c1, c2)
        print "WHOIS OUTPUT"
        # Organization name with whois query
        for key in ['range','description','postal_code','city','address','state','asn_country_code' ]:
            try:
                field=str(IPWhois(address).lookup_whois()['nets'][0][key])
            except:
                continue
            else:
                if field != 'None':
                    print " "*num_it+str(field).replace('\n','\n'+' '*num_it).replace(' - ','-')
        node_num=node_num+1
